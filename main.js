!function(){"use strict";class e{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleCardClick=s,this.isLiked=e.isLiked,this._ownerId=e.owner._id,this._cardId=e._id,this._handleLikeClick=r,this._handleDeleteClick=n}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick()})),this._cardElement.querySelector(".card__button-delete").addEventListener("click",(()=>{this._handleDeleteClick(this._cardId)})),this._cardImage.addEventListener("click",(()=>{this._handleCardClick({name:this._name,link:this._link})}))}updateLikes(e){this.isLiked=e,this._toggleLikeButton()}_toggleLikeButton(){this.isLiked?this._likeButton.classList.add("card__button-like_active"):this._likeButton.classList.remove("card__button-like_active")}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}removeCardElement(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__button-like"),this._deleteButton=this._cardElement.querySelector(".card__button-delete"),this._cardImage.src=this._link,this._cardTitle.textContent=this._name,this._cardImage.alt=this._name,this._setEventListeners(),this._toggleLikeButton(),this._cardElement}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_setEventListeners(){this._inputEls=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))})),this.toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class s{constructor(e,t){let{items:s,renderer:r}=e;this._renderItems=s,this._renderer=r,this._container=t}renderItems(){console.log("this._renderItems:",this._renderItems),this._renderItems.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_closeModalClick=e=>{(e.target.classList.contains("modal__close")||e.target.classList.contains("modal"))&&this.close()};_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",this._closeModalClick)}}class n extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=document.querySelector(`${e} .modal__form`),this._handleFormSubmit=t,this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}_getInputValues(){const e={};return this._popupForm.querySelectorAll(".modal__form-input").forEach((t=>{""!==t.value&&(e[t.name]=t.value)})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){this._popupForm.reset(),super.close()}}const i=document.querySelector(".profile__title"),o=document.querySelector(".profile__subtitle"),a=document.querySelector("#profile-button-edit"),l=document.querySelector("#profile-edit-modal"),d=document.querySelector("#profile-title-input"),c=document.querySelector("#profile-subtitle-input"),u=l.querySelector("#modal-form-edit"),h=document.querySelector("#modal-form-avatar"),_=document.querySelector(".cards__list"),m=document.querySelector("#profile-button-add"),p=(document.querySelector("#profile-add-modal"),document.querySelector("#modal-form-add")),E=document.querySelector(".profile__image-edit"),v=document.querySelector(".profile__image"),g=(document.querySelector("#modal-delete"),{formSelector:"modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__form-input_type_error",errorClass:"modal__error_visible"}),b=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleServerResponse(e){return e.json().then((t=>{if(e.ok)return console.log("Server response data:",t),t;throw console.error("Error data:",t),new Error(`Error: ${e.status}: ${t.message}`)}))}_request(e,t){return fetch(e,t).then(this._handleServerResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}addCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}removeCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}changeLikeStatus(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers})}updateUserInfo(e,t){return console.log(e,t),this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}setUserAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"1ccf1ba4-0220-4b67-950b-c472a98644ae","Content-Type":"application/json"}}),S=new t(g,p),L=new t(g,u),f=new t(g,h);L.enableValidation(),S.enableValidation(),f.enableValidation();const k=new n("#profile-edit-modal",(function(e){let{name:t,description:s}=e;k.setLoading(!0),b.updateUserInfo(t,s).then((()=>{x.setUserInfo(t,s),k.close()})).catch(console.error).finally((()=>{k.setLoading(!1)}))}));k.setEventListeners();const y=new n("#avatar-edit-modal",(function(e){let{url:t}=e;y.setLoading(!0),console.log(t),b.setUserAvatar(t).then((e=>{x.setUserAvatar(e.avatar),y.close()})).catch(console.error).finally((()=>{y.setLoading(!1)}))}));y.setEventListeners();const C=new class extends r{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent,this._form=this._popupElement.querySelector("form")}setSubmitAction(e){this._handleFormSubmit=e}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Removing...";this._submitButton.textContent=e?t:this._submitButtonText}close(){super.close(),this._popupForm.removeEventListener("submit",this._handleFormSubmit)}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._handleFormSubmit),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}("#modal-delete");function I(e){let{name:t,link:s}=e;U.open({name:t,link:s})}function q(t){const s=new e(t,"#card-template",I,(function(){b.changeLikeStatus(t._id,s.isLiked).then((e=>{console.log(e),s.updateLikes(e.isLiked)})).catch(console.error)}),(function(e){console.log(e),C.setSubmitAction((()=>{C.setLoading(!0),b.removeCard(e).then((e=>{s.removeCardElement(e._id),C.close()})).catch(console.error).finally((()=>{C.setLoading(!1)}))})),C.open()}));return s.getView()}let B,w;C.setEventListeners(),Promise.all([b.getInitialCards(),b.getUserInfo()]).then((e=>{let[t,r]=e;x.setUserInfo(r.name,r.about),x.setUserAvatar(r.avatar),w=r._id,B=new s({items:t,renderer:e=>{const t=q(e);B.addItem(t)}},_),B.renderItems()})).catch(console.error);const U=new class extends r{constructor(e){super({popupSelector:e})}open(e){this._previewImageElement=this._popupElement.querySelector(".modal__image"),this._previewImageCaption=this._popupElement.querySelector(".modal__image-caption"),this._previewImageElement.alt=e.name,this._previewImageCaption.textContent=e.name,this._previewImageElement.src=e.link,super.open()}}("#image-modal");U.setEventListeners();const x=new class{constructor(e,t,s){this._nameElement=e,this._jobElement=t,this._avatarElement=s}getUserInfo(){const e={};return e.name=this._nameElement.textContent,e.description=this._jobElement.textContent,console.log(e),e}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}setUserAvatar(e){this._avatarElement.src=e,this._avatarElement.alt=this._nameElement.textcontent}}(i,o,v),F=new n("#profile-add-modal",(function(e){let{name:t,link:s}=e;F.setLoading(!0),b.addCard({name:t,link:s}).then((e=>{const t=q(e);B.addItem(t),F.close()})).catch(console.error).finally((()=>{F.setLoading(!1)}))}));F.setEventListeners(),a.addEventListener("click",(()=>{const{name:e,description:t}=x.getUserInfo();d.value=e,c.value=t,k.open(),L.toggleButtonState()})),m.addEventListener("click",(()=>{F.open(),S.toggleButtonState()})),E.addEventListener("click",(()=>{y.open(),f.toggleButtonState()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,