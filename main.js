!function(){"use strict";class e{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleCardClick=s,this.isLiked=e.isLiked,this._ownerId=e.owner._id,this._cardId=e._id,this._handleLikeClick=r,this._handleDeleteClick=n}_setEventListeners(){this._cardElement.querySelector(".card__button-like").addEventListener("click",(()=>{this._handleLikeClick()})),this._cardElement.querySelector(".card__button-delete").addEventListener("click",(()=>{this._handleDeleteClick(this._cardId)})),this._cardImage.addEventListener("click",(()=>{this._handleCardClick({name:this._name,link:this._link})}))}updateLikes(e){this.isLiked=e,this._toggleLikeButton()}_toggleLikeButton(){this.isLiked?this._likeButton.classList.add("card__button-like_active"):this._likeButton.classList.remove("card__button-like_active")}_handleDelete(){this._cardElement.remove()}_getTemplate(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement}removeCardElement(){this._cardElement.remove()}getView(){return this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__button-like"),this._deleteButton=this._cardElement.querySelector(".card__button-delete"),this._cardImage.src=this._link,this._cardTitle.textContent=this._name,this._cardImage.alt=this._name,this._setEventListeners(),this._toggleLikeButton(),this._cardElement}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_setEventListeners(){this._inputEls=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))})),this.toggleButtonState()}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class s{constructor(e,t){let{items:s,renderer:r}=e;this._renderItems=s,this._renderer=r,this._container=t}renderItems(){console.log("this._renderItems:",this._renderItems),this._renderItems.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_closeModalClick=e=>{(e.target.classList.contains("modal__close")||e.target.classList.contains("modal"))&&this.close()};_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",this._closeModalClick)}}class n extends r{constructor(e,t){super({popupSelector:e}),this._popupForm=document.querySelector(`${e} .modal__form`),this._handleFormSubmit=t,this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}_getInputValues(){const e={};return this._popupForm.querySelectorAll(".modal__form-input").forEach((t=>{""!==t.value&&(e[t.name]=t.value)})),e}_submitForm=e=>{e.preventDefault(),this.setLoading(!0);const t=this._getInputValues();this._handleFormSubmit(t,(()=>{this.setLoading(!1),setTimeout((()=>{this.close()}),2e3)})),console.log(t)};setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",this._submitForm)}close(){this._popupForm.reset(),super.close()}}const i=document.querySelector(".profile__title"),o=document.querySelector(".profile__subtitle"),a=document.querySelector("#profile-button-edit"),l=document.querySelector("#profile-edit-modal"),d=document.querySelector("#profile-title-input"),c=document.querySelector("#profile-subtitle-input"),u=l.querySelector("#modal-form-edit"),h=document.querySelector("#modal-form-avatar"),_=document.querySelector(".cards__list"),m=document.querySelector("#profile-button-add"),p=(document.querySelector("#profile-add-modal"),document.querySelector("#modal-form-add")),E=document.querySelector(".profile__image-edit"),v=document.querySelector(".profile__image"),b=(document.querySelector("#modal-delete"),{formSelector:"modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__form-input_type_error",errorClass:"modal__error_visible"}),g=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleServerResponse(e){return e.json().then((t=>{if(e.ok)return console.log("Server response data:",t),t;throw console.error("Error data:",t),new Error(`Error: ${e.status}: ${t.message}`)}))}_request(e,t){return fetch(e,t).then(this._handleServerResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}addCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}removeCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}changeLikeStatus(e,t){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:this._headers})}updateUserInfo(e,t){return console.log(e,t),this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}setUserAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"1ccf1ba4-0220-4b67-950b-c472a98644ae","Content-Type":"application/json"}}),S=new t(b,p),L=new t(b,u),f=new t(b,h);L.enableValidation(),S.enableValidation(),f.enableValidation();const k=new n("#profile-edit-modal",(function(e){let{name:t,description:s}=e;k.setLoading(!0),g.updateUserInfo(t,s).then((()=>{x.setUserInfo(t,s),k.close()})).catch(console.error).finally((()=>{k.setLoading(!1)}))}));k.setEventListeners();const y=new n("#avatar-edit-modal",(function(e){let{url:t}=e;y.setLoading(!0),console.log(t),g.setUserAvatar(t).then((e=>{x.setUserAvatar(e.avatar),y.close()})).catch(console.error).finally((()=>{y.setLoading(!1)}))}));y.setEventListeners();const C=new class extends r{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent,this._form=this._popupElement.querySelector("form"),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}setSubmitAction(e){this._handleFormSubmit=e}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Removing...";this._submitButton.textContent=e?t:this._submitButtonText}close(){super.close(),this._popupForm.removeEventListener("submit",this._handleFormSubmit)}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._handleFormSubmit)}}("#modal-delete");function q(e){let{name:t,link:s}=e;U.open({name:t,link:s})}function I(t){const s=new e(t,"#card-template",q,(function(){g.changeLikeStatus(t._id,s.isLiked).then((e=>{console.log(e),s.updateLikes(e.isLiked)})).catch(console.error)}),(function(e){console.log(e),C.setSubmitAction((()=>{C.setLoading(!0),g.removeCard(e).then((e=>{s.removeCardElement(e._id),C.close()})).catch(console.error).finally((()=>{C.setLoading(!1)}))})),C.open()}));return s.getView()}let B,w;C.setEventListeners(),Promise.all([g.getInitialCards(),g.getUserInfo()]).then((e=>{let[t,r]=e;x.setUserInfo(r.name,r.about),x.setUserAvatar(r.avatar),w=r._id,B=new s({items:t,renderer:e=>{const t=I(e);B.addItem(t)}},_),B.renderItems()})).catch(console.error);const U=new class extends r{constructor(e){super({popupSelector:e})}open(e){this._previewImageElement=this._popupElement.querySelector(".modal__image"),this._previewImageCaption=this._popupElement.querySelector(".modal__image-caption"),this._previewImageElement.alt=e.name,this._previewImageCaption.textContent=e.name,this._previewImageElement.src=e.link,super.open()}}("#image-modal");U.setEventListeners();const x=new class{constructor(e,t,s){this._nameElement=e,this._jobElement=t,this._avatarElement=s}getUserInfo(){const e={};return e.name=this._nameElement.textContent,e.description=this._jobElement.textContent,console.log(e),e}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}setUserAvatar(e){this._avatarElement.src=e,this._avatarElement.alt=this._nameElement.textcontent}}(i,o,v),F=new n("#profile-add-modal",(function(e){let{name:t,link:s}=e;F.setLoading(!0),g.addCard({name:t,link:s}).then((e=>{const t=I(e);B.addItem(t)})).catch(console.error).finally((()=>{F.setLoading(!1),F.close()}))}));F.setEventListeners(),a.addEventListener("click",(()=>{const{name:e,description:t}=x.getUserInfo();d.value=e,c.value=t,k.open(),L.toggleButtonState()})),m.addEventListener("click",(()=>{F.open(),S.toggleButtonState()})),E.addEventListener("click",(()=>{y.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPLEdBRTFCLElBZkFpSCxFQUFhM0csb0JBaUNid0IsRUFBa0J4RyxpQkFBaUIsU0FBUyxLQUMxQyxNQUFNLEtBQUVmLEVBQUksWUFBRWtLLEdBQWdCVyxFQUFTdEIsY0FFdkM5QixFQUFrQlYsTUFBUS9HLEVBQzFCMEgsRUFBcUJYLE1BQVFtRCxFQUU3QlMsRUFBVXBGLE9BQ1ZrRixFQUFrQmhILG1CQUFtQixJQUd2Q3FFLEVBQWlCL0csaUJBQWlCLFNBQVMsS0FDekMyTCxFQUFhbkgsT0FDYmdGLEVBQWlCOUcsbUJBQW1CLElBR3RDdUUsRUFBaUJqSCxpQkFBaUIsU0FBUyxLQUN6Q2tLLEVBQWdCMUYsTUFBTSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGNhcmREYXRhLCBcclxuICAgICAgICBjYXJkU2VsZWN0b3IsIFxyXG4gICAgICAgIGhhbmRsZUNhcmRDbGljayxcclxuICAgICAgICBoYW5kbGVMaWtlQ2xpY2ssXHJcbiAgICAgICAgaGFuZGxlRGVsZXRlQ2xpY2spIHtcclxuICAgICAgICB0aGlzLl9uYW1lID0gY2FyZERhdGEubmFtZTtcclxuICAgICAgICB0aGlzLl9saW5rID0gY2FyZERhdGEubGluaztcclxuICAgICAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xyXG4gICAgICAgIHRoaXMuaXNMaWtlZCA9IGNhcmREYXRhLmlzTGlrZWQ7XHJcbiAgICAgICAgdGhpcy5fb3duZXJJZCA9IGNhcmREYXRhLm93bmVyLl9pZDtcclxuICAgICAgICB0aGlzLl9jYXJkSWQgPSBjYXJkRGF0YS5faWQ7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrID0gaGFuZGxlTGlrZUNsaWNrO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrID0gaGFuZGxlRGVsZXRlQ2xpY2s7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihgLmNhcmRfX2J1dHRvbi1saWtlYClcclxuICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrKCk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19idXR0b24tZGVsZXRlXCIpXHJcbiAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUNsaWNrKHRoaXMuX2NhcmRJZCk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5fY2FyZEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayh7IG5hbWU6IHRoaXMuX25hbWUsIGxpbms6IHRoaXMuX2xpbmsgfSk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlTGlrZXMoaXNMaWtlZCkge1xyXG4gICAgICAgIHRoaXMuaXNMaWtlZCA9IGlzTGlrZWQ7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlTGlrZUJ1dHRvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIF90b2dnbGVMaWtlQnV0dG9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzTGlrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiY2FyZF9fYnV0dG9uLWxpa2VfYWN0aXZlXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImNhcmRfX2J1dHRvbi1saWtlX2FjdGl2ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2hhbmRsZURlbGV0ZSgpIHsgXHJcbiAgICAgICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgICAgdGhpcy5fY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIilcclxuICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICByZW1vdmVDYXJkRWxlbWVudCgpIHtcclxuICAgICAgICAvLyBBc3N1bWluZyB0aGlzLl9jYXJkRWxlbWVudCBpcyB0aGUgY2FyZCBET00gZWxlbWVudFxyXG4gICAgICAgIHRoaXMuX2NhcmRFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICBnZXRWaWV3KCkge1xyXG4gICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICAgICB0aGlzLl9jYXJkSW1hZ2UgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xyXG4gICAgIHRoaXMuX2NhcmRUaXRsZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIik7XHJcbiAgICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fYnV0dG9uLWxpa2VcIik7XHJcbiAgICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19idXR0b24tZGVsZXRlXCIpO1xyXG4gICAgIHRoaXMuX2NhcmRJbWFnZS5zcmMgPSB0aGlzLl9saW5rO1xyXG4gICAgIHRoaXMuX2NhcmRUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICAgdGhpcy5fY2FyZEltYWdlLmFsdCA9IHRoaXMuX25hbWU7XHJcblxyXG4gICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgdGhpcy5fdG9nZ2xlTGlrZUJ1dHRvbigpO1xyXG5cclxuICAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IoY29uZmlnLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGNvbmZpZy5pbnB1dFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gY29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBjb25maWcuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IGNvbmZpZy5lcnJvckNsYXNzO1xyXG5cclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbCkge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWwgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC50ZXh0Q29udGVudCA9IGlucHV0RWwudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICBlcnJvck1lc3NhZ2VFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWwuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JNZXNzYWdlRWwudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgZXJyb3JNZXNzYWdlRWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCkge1xyXG4gICAgaWYgKCFpbnB1dEVsLnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbClcclxuICAgIH1cclxuICAgIFxyXG4gIH1cclxuXHJcbiAgdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfaGFzSW52YWxpZElucHV0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0RWxzLnNvbWUoKGlucHV0RWwpID0+IHtcclxuICAgICAgcmV0dXJuICFpbnB1dEVsLnZhbGlkaXR5LnZhbGlkO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5faW5wdXRFbHMgPSBbXHJcbiAgICAgIC4uLnRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvciksXHJcbiAgICBdO1xyXG4gIFxyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3JcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5faW5wdXRFbHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICBcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb3JtVmFsaWRhdG9yO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMuX3JlbmRlckl0ZW1zID0gaXRlbXM7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMuX3JlbmRlckl0ZW1zOicsIHRoaXMuX3JlbmRlckl0ZW1zKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEl0ZW0oY2FyZEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChjYXJkRWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IgKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1vZGFsX29wZW5lZFwiKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2Nsb3NlTW9kYWxDbGljayA9IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9fY2xvc2VcIikgfHxcclxuICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwibW9kYWxcIilcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfaGFuZGxlRXNjQ2xvc2UgPSAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5fY2xvc2VNb2RhbENsaWNrKTtcclxuICAgIH1cclxufSIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgICAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHtwb3B1cFNlbGVjdG9yfSAubW9kYWxfX2Zvcm1gKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblRleHQgPSB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TG9hZGluZyhpc0xvYWRpbmcsIGxvYWRpbmdUZXh0ID0gXCJTYXZpbmcuLi5cIikge1xyXG4gICAgICAgIGlmIChpc0xvYWRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gbG9hZGluZ1RleHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5fc3VibWl0QnV0dG9uVGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHt9O1xyXG4gICAgICAgIGNvbnN0IGlucHV0TGlzdCA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19mb3JtLWlucHV0XCIpO1xyXG4gICAgICAgIGlucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQudmFsdWUgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICBfc3VibWl0Rm9ybSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnQgdGhlIGZvcm0gZnJvbSBzdWJtaXR0aW5nIG5vcm1hbGx5XHJcbiAgICAgICAgdGhpcy5zZXRMb2FkaW5nKHRydWUpOyAvLyBEaXNhYmxlIHRoZSBzdWJtaXQgYnV0dG9uIGFuZCBzaG93IGxvYWRpbmcgdGV4dFxyXG4gICAgICAgIGNvbnN0IGlucHV0VmFsdWVzID0gdGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KGlucHV0VmFsdWVzLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TG9hZGluZyhmYWxzZSk7IC8vIFJlLWVuYWJsZSB0aGUgc3VibWl0IGJ1dHRvbiBhZnRlciB0aGUgZm9ybSBpcyBoYW5kbGVkXHJcbiAgICAgICAgICAgIC8vIFlvdSBjYW4gYWRkIGEgdGltZW91dCBoZXJlIGlmIHlvdSB3YW50IHRvIGtlZXAgdGhlIHBvcHVwIG9wZW4gZm9yIGEgd2hpbGVcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7IC8vIENsb3NlIHRoZSBwb3B1cCBhZnRlciBhIGRlbGF5XHJcbiAgICAgICAgICAgIH0sIDIwMDApOyAvLyBBZGp1c3QgdGhlIGRlbGF5IGFzIG5lZWRlZFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGlucHV0VmFsdWVzKTtcclxuICAgIH07XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCB0aGlzLl9zdWJtaXRGb3JtKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLl9wb3B1cEZvcm0ucmVzZXQoKTtcclxuICAgICAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBwcm9maWxlVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3RpdGxlXCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVN1YnRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19zdWJ0aXRsZVwiKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWJ1dHRvbi1lZGl0XCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1lZGl0LW1vZGFsXCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVRpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtdGl0bGUtaW5wdXRcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlU3VidGl0bGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1zdWJ0aXRsZS1pbnB1dFwiKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0Rm9ybSA9IHByb2ZpbGVFZGl0TW9kYWwucXVlcnlTZWxlY3RvcihcIiNtb2RhbC1mb3JtLWVkaXRcIik7XHJcbmV4cG9ydCBjb25zdCBhdmF0YXJFZGl0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwtZm9ybS1hdmF0YXJcIik7XHJcbmV4cG9ydCBjb25zdCBjYXJkTGlzdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fbGlzdFwiKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVBZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYnV0dG9uLWFkZFwiKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVBZGRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcHJvZmlsZS1hZGQtbW9kYWxcIik7XHJcbmV4cG9ydCBjb25zdCBjYXJkQWRkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwtZm9ybS1hZGRcIik7XHJcbmV4cG9ydCBjb25zdCBhdmF0YXJFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZS1lZGl0XCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9faW1hZ2VcIik7XHJcbmV4cG9ydCBjb25zdCBkZWxldGVNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwtZGVsZXRlXCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICAgIGZvcm1TZWxlY3RvcjogXCJtb2RhbF9fZm9ybVwiLFxyXG4gICAgaW5wdXRTZWxlY3RvcjogXCIubW9kYWxfX2Zvcm0taW5wdXRcIixcclxuICAgIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXHJcbiAgICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcIm1vZGFsX19idXR0b25fZGlzYWJsZWRcIixcclxuICAgIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9fZm9ybS1pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgICBlcnJvckNsYXNzOiBcIm1vZGFsX19lcnJvcl92aXNpYmxlXCIsXHJcbiAgfTsiLCJpbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgVXNlckluZm8gZnJvbSBcIi4uL2NvbXBvbmVudHMvVXNlckluZm8uanNcIjtcclxuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcclxuaW1wb3J0IFwiLi4vcGFnZXMvaW5kZXguY3NzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhDb25maXJtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm0uanNcIjtcclxuaW1wb3J0IHtcclxuICBwcm9maWxlVGl0bGUsXHJcbiAgcHJvZmlsZVN1YnRpdGxlLFxyXG4gIHByb2ZpbGVFZGl0QnV0dG9uLFxyXG4gIHByb2ZpbGVUaXRsZUlucHV0LFxyXG4gIHByb2ZpbGVTdWJ0aXRsZUlucHV0LFxyXG4gIHByb2ZpbGVFZGl0Rm9ybSxcclxuICBjYXJkTGlzdEVsLFxyXG4gIHByb2ZpbGVBZGRCdXR0b24sXHJcbiAgY2FyZEFkZEZvcm0sXHJcbiAgY29uZmlnLFxyXG4gIGF2YXRhckVkaXRCdXR0b24sXHJcbiAgcHJvZmlsZUF2YXRhcixcclxuICBhdmF0YXJFZGl0Rm9ybSxcclxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcblxyXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcclxuICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLWFwaS5lbi50cmlwbGV0ZW4tc2VydmljZXMuY29tL3YxXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCIxY2NmMWJhNC0wMjIwLTRiNjctOTUwYi1jNDcyYTk4NjQ0YWVcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuY29uc3QgYWRkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgY2FyZEFkZEZvcm0pO1xyXG5jb25zdCBlZGl0Rm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgcHJvZmlsZUVkaXRGb3JtKTtcclxuY29uc3QgZWRpdEF2YXRhclZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgYXZhdGFyRWRpdEZvcm0pO1xyXG5cclxuZWRpdEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5hZGRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuZWRpdEF2YXRhclZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcblxyXG4vL2VkaXQgcG9wdXBcclxuY29uc3QgZWRpdFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjcHJvZmlsZS1lZGl0LW1vZGFsXCIsXHJcbiAgaGFuZGxlRWRpdFByb2ZpbGVTdWJtaXRcclxuKTtcclxuXHJcbmVkaXRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy9hdmF0YXIgZWRpdCBwb3B1cFxyXG5jb25zdCBhdmF0YXJFZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcclxuICBcIiNhdmF0YXItZWRpdC1tb2RhbFwiLFxyXG4gIGhhbmRsZUF2YXRhckZvcm1TdWJtaXRcclxuKTtcclxuXHJcbmF2YXRhckVkaXRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy9kZWxldGUgcG9wdXBcclxuY29uc3QgZGVsZXRlUG9wdXAgPSBuZXcgUG9wdXBXaXRoQ29uZmlybShcIiNtb2RhbC1kZWxldGVcIik7XHJcblxyXG5kZWxldGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy9Qb3B1cCB3aXRoIGltYWdlXHJcbmZ1bmN0aW9uIGhhbmRsZVByZXZpZXdJbWFnZSh7IG5hbWUsIGxpbmsgfSkge1xyXG4gIHBvcHVwSW1hZ2Uub3Blbih7IG5hbWUsIGxpbmsgfSk7XHJcbn1cclxuXHJcbi8vcmVuZGVyIGNhcmQgZnVuY3Rpb25cclxuZnVuY3Rpb24gcmVuZGVyQ2FyZChjYXJkRGF0YSkge1xyXG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gbmV3IENhcmQoXHJcbiAgICBjYXJkRGF0YSxcclxuICAgIFwiI2NhcmQtdGVtcGxhdGVcIixcclxuICAgIGhhbmRsZVByZXZpZXdJbWFnZSxcclxuICAgIGZ1bmN0aW9uIGhhbmRsZUxpa2UoKSB7XHJcbiAgICAgIGFwaVxyXG4gICAgICAuY2hhbmdlTGlrZVN0YXR1cyhjYXJkRGF0YS5faWQsIGNhcmRFbGVtZW50LmlzTGlrZWQpXHJcbiAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgIGNhcmRFbGVtZW50LnVwZGF0ZUxpa2VzKHJlcy5pc0xpa2VkKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG4gICAgfSxcclxuXHJcbiAgICBmdW5jdGlvbiBoYW5kbGVEZWxldGUoY2FyZElkKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGNhcmRJZClcclxuICAgICAgZGVsZXRlUG9wdXAuc2V0U3VibWl0QWN0aW9uKCgpID0+IHtcclxuICAgICAgICBkZWxldGVQb3B1cC5zZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgICAgIGFwaVxyXG4gICAgICAgIC5yZW1vdmVDYXJkKGNhcmRJZClcclxuICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICBjYXJkRWxlbWVudC5yZW1vdmVDYXJkRWxlbWVudChyZXMuX2lkKTtcclxuICAgICAgICAgIGRlbGV0ZVBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goY29uc29sZS5lcnJvcilcclxuICAgICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICBkZWxldGVQb3B1cC5zZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGRlbGV0ZVBvcHVwLm9wZW4oKTtcclxuICAgIH0sXHJcbiAgKTtcclxuICByZXR1cm4gY2FyZEVsZW1lbnQuZ2V0VmlldygpO1xyXG59XHJcblxyXG5sZXQgY2FyZFNlY3Rpb247XHJcbmxldCB1c2VySWQ7XHJcbnVzZXJJZDtcclxuXHJcblByb21pc2UuYWxsKFthcGkuZ2V0SW5pdGlhbENhcmRzKCksIGFwaS5nZXRVc2VySW5mbygpXSlcclxuICAudGhlbigoW2luaXRpYWxDYXJkcywgdXNlckRhdGFdKSA9PiB7XHJcbiAgICAgICAgdXNlckluZm8uc2V0VXNlckluZm8odXNlckRhdGEubmFtZSwgdXNlckRhdGEuYWJvdXQpO1xyXG4gICAgdXNlckluZm8uc2V0VXNlckF2YXRhcih1c2VyRGF0YS5hdmF0YXIpO1xyXG4gICAgdXNlcklkID0gdXNlckRhdGEuX2lkO1xyXG4gICAgY2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICAgICAge1xyXG4gICAgICAgIGl0ZW1zOiBpbml0aWFsQ2FyZHMsXHJcbiAgICAgICAgcmVuZGVyZXI6IChjYXJkRGF0YSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSByZW5kZXJDYXJkKGNhcmREYXRhKTtcclxuICAgICAgICAgIGNhcmRTZWN0aW9uLmFkZEl0ZW0oY2FyZEVsZW1lbnQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGNhcmRMaXN0RWxcclxuICAgICk7XHJcbiAgICBjYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG5cclxuY29uc3QgcG9wdXBJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIiNpbWFnZS1tb2RhbFwiKTtcclxucG9wdXBJbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy91c2VyIGluZm9cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oXHJcbiAgcHJvZmlsZVRpdGxlLFxyXG4gIHByb2ZpbGVTdWJ0aXRsZSxcclxuICBwcm9maWxlQXZhdGFyXHJcbik7XHJcblxyXG4vL2hhbmRsZXJzXHJcbmZ1bmN0aW9uIGhhbmRsZUVkaXRQcm9maWxlU3VibWl0KHsgbmFtZSwgZGVzY3JpcHRpb24gfSkge1xyXG4gIGVkaXRQb3B1cC5zZXRMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLnVwZGF0ZVVzZXJJbmZvKG5hbWUsIGRlc2NyaXB0aW9uKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICB1c2VySW5mby5zZXRVc2VySW5mbyhuYW1lLCBkZXNjcmlwdGlvbik7XHJcbiAgICAgIGVkaXRQb3B1cC5jbG9zZSgpO1xyXG4gICAgfSkgXHJcbiAgICAuY2F0Y2goY29uc29sZS5lcnJvcilcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgZWRpdFBvcHVwLnNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vbmV3IENhcmQgUG9wdXBcclxuY29uc3QgbmV3Q2FyZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIjcHJvZmlsZS1hZGQtbW9kYWxcIixcclxuICBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdFxyXG4pO1xyXG5cclxubmV3Q2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdCh7IG5hbWUsIGxpbmsgfSkge1xyXG4gIG5ld0NhcmRQb3B1cC5zZXRMb2FkaW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLmFkZENhcmQoeyBuYW1lLCBsaW5rIH0pXHJcbiAgICAudGhlbigoY2FyZERhdGEpID0+IHtcclxuICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSByZW5kZXJDYXJkKGNhcmREYXRhKTtcclxuICAgICAgY2FyZFNlY3Rpb24uYWRkSXRlbShjYXJkRWxlbWVudCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpXHJcbiAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgIG5ld0NhcmRQb3B1cC5zZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgbmV3Q2FyZFBvcHVwLmNsb3NlKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQXZhdGFyRm9ybVN1Ym1pdCh7IHVybCB9KSB7XHJcbiAgYXZhdGFyRWRpdFBvcHVwLnNldExvYWRpbmcodHJ1ZSk7XHJcbiAgY29uc29sZS5sb2codXJsKTtcclxuICBhcGlcclxuICAuc2V0VXNlckF2YXRhcih1cmwpXHJcbiAgLnRoZW4oKHVzZXJEYXRhKSA9PiB7XHJcbiAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKHVzZXJEYXRhLmF2YXRhcik7XHJcbiAgICBhdmF0YXJFZGl0UG9wdXAuY2xvc2UoKTtcclxuICB9KVxyXG4gIC5jYXRjaChjb25zb2xlLmVycm9yKVxyXG4gIC5maW5hbGx5KCgpID0+IHtcclxuICAgIGF2YXRhckVkaXRQb3B1cC5zZXRMb2FkaW5nKGZhbHNlKTtcclxuICB9KTtcclxufVxyXG5cclxuLy9FdmVudCBoYW5kbGVyc1xyXG5wcm9maWxlRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGNvbnN0IHsgbmFtZSwgZGVzY3JpcHRpb24gfSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgXHJcbiAgcHJvZmlsZVRpdGxlSW5wdXQudmFsdWUgPSBuYW1lO1xyXG4gIHByb2ZpbGVTdWJ0aXRsZUlucHV0LnZhbHVlID0gZGVzY3JpcHRpb247XHJcblxyXG4gIGVkaXRQb3B1cC5vcGVuKCk7XHJcbiAgZWRpdEZvcm1WYWxpZGF0b3IudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxufSk7XHJcblxyXG5wcm9maWxlQWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgbmV3Q2FyZFBvcHVwLm9wZW4oKTtcclxuICBhZGRGb3JtVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbn0pO1xyXG5cclxuYXZhdGFyRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGF2YXRhckVkaXRQb3B1cC5vcGVuKCk7XHJcblxyXG59KTtcclxuXHJcblxyXG5cclxuLy9jYXJkIHNlY3Rpb25cclxuXHJcbi8vIGNhcmRTZWN0aW9uLnJlbmRlckl0ZW1zKCk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGJhc2VVcmwsIGhlYWRlcnMgfSkge1xyXG4gICAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcclxuICAgICAgdGhpcy5faGVhZGVycyA9IGhlYWRlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgX2hhbmRsZVNlcnZlclJlc3BvbnNlKHJlcykge1xyXG4gICAgICByZXR1cm4gcmVzLmpzb24oKS50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdTZXJ2ZXIgcmVzcG9uc2UgZGF0YTonLCBkYXRhKTtcclxuICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBMb2cgdGhlIGVycm9yIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlclxyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGF0YTonLCBkYXRhKTtcclxuICAgICAgICAgIC8vIFRocm93IGFuIGVycm9yIHdpdGggYm90aCB0aGUgc3RhdHVzIGFuZCB0aGUgZXJyb3IgbWVzc2FnZVxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvcjogJHtyZXMuc3RhdHVzfTogJHtkYXRhLm1lc3NhZ2V9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfcmVxdWVzdCh1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZldGNoKHVybCwgb3B0aW9ucykudGhlbih0aGlzLl9oYW5kbGVTZXJ2ZXJSZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5pdGlhbENhcmRzKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHsgaGVhZGVyczogdGhpcy5faGVhZGVycyB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYWRkQ2FyZCh7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBuYW1lLCBsaW5rIH0pLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDYXJkKGNhcmRJZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2VMaWtlU3RhdHVzKGNhcmRJZCwgaXNMaWtlZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XHJcbiAgICAgICAgbWV0aG9kOiBpc0xpa2VkID8gXCJERUxFVEVcIiA6IFwiUFVUXCIsXHJcbiAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB1cGRhdGVVc2VySW5mbyhuYW1lLCBkZXNjcmlwdGlvbikge1xyXG4gICAgY29uc29sZS5sb2cobmFtZSwgZGVzY3JpcHRpb24pO1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBhYm91dDogZGVzY3JpcHRpb24sXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VXNlckF2YXRhcih1cmwpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGF2YXRhcjogdXJsLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9IiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhDb25maXJtIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgICAgICB0aGlzLl9wb3B1cEZvcm0gPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fZm9ybVwiKTtcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9wb3B1cEZvcm0ucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xyXG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblRleHQgPSB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XHJcbiAgICAgICAgdGhpcy5fZm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtJyk7XHJcbiAgICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgIHNldFN1Ym1pdEFjdGlvbihhY3Rpb24pIHtcclxuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gYWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHNldExvYWRpbmcoaXNMb2FkaW5nLCBsb2FkaW5nVGV4dCA9IFwiUmVtb3ZpbmcuLi5cIikge1xyXG4gICAgICAgIGlmKGlzTG9hZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBsb2FkaW5nVGV4dDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLl9zdWJtaXRCdXR0b25UZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICBzdXBlci5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuX3BvcHVwRm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuX2hhbmRsZUZvcm1TdWJtaXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5fcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKGRhdGEpIHtcclxuICAgICAgICB0aGlzLl9wcmV2aWV3SW1hZ2VFbGVtZW50ID0gXHJcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWxfX2ltYWdlXCIpO1xyXG4gICAgICAgIHRoaXMuX3ByZXZpZXdJbWFnZUNhcHRpb24gPSBcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9faW1hZ2UtY2FwdGlvblwiKTtcclxuICAgICAgICB0aGlzLl9wcmV2aWV3SW1hZ2VFbGVtZW50LmFsdCA9IGRhdGEubmFtZTtcclxuICAgICAgICB0aGlzLl9wcmV2aWV3SW1hZ2VDYXB0aW9uLnRleHRDb250ZW50ID0gZGF0YS5uYW1lO1xyXG4gICAgICAgIHRoaXMuX3ByZXZpZXdJbWFnZUVsZW1lbnQuc3JjID0gZGF0YS5saW5rO1xyXG5cclxuICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IodXNlck5hbWVFbGVtZW50LCB1c2VySm9iRWxlbWVudCwgYXZhdGFyRWxlbWVudCkge1xyXG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSAgdXNlck5hbWVFbGVtZW50O1xyXG4gICAgdGhpcy5fam9iRWxlbWVudCA9IHVzZXJKb2JFbGVtZW50O1xyXG4gICAgdGhpcy5fYXZhdGFyRWxlbWVudCA9IGF2YXRhckVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIGNvbnN0IHByb2ZpbGVPYmplY3QgPSB7fTtcclxuICAgIHByb2ZpbGVPYmplY3RbXCJuYW1lXCJdID0gdGhpcy5fbmFtZUVsZW1lbnQudGV4dENvbnRlbnQ7XHJcbiAgICBwcm9maWxlT2JqZWN0W1wiZGVzY3JpcHRpb25cIl0gPSB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50O1xyXG4gICAgY29uc29sZS5sb2cocHJvZmlsZU9iamVjdCk7XHJcbiAgICByZXR1cm4gcHJvZmlsZU9iamVjdDtcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKG5hbWUsIGRlc2NyaXB0aW9uKSB7XHJcbiAgICB0aGlzLl9uYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50ID0gZGVzY3JpcHRpb247XHJcbiAgfVxyXG5cclxuICBzZXRVc2VyQXZhdGFyKGF2YXRhckVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2F2YXRhckVsZW1lbnQuc3JjID0gYXZhdGFyRWxlbWVudDtcclxuICAgIHRoaXMuX2F2YXRhckVsZW1lbnQuYWx0ID0gdGhpcy5fbmFtZUVsZW1lbnQudGV4dGNvbnRlbnRcclxuICB9XHJcbn0iXSwibmFtZXMiOlsiQ2FyZCIsImNvbnN0cnVjdG9yIiwiY2FyZERhdGEiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVMaWtlQ2xpY2siLCJoYW5kbGVEZWxldGVDbGljayIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsImlzTGlrZWQiLCJfb3duZXJJZCIsIm93bmVyIiwiX2lkIiwiX2NhcmRJZCIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQ2xpY2siLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfY2FyZEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9jYXJkSW1hZ2UiLCJ1cGRhdGVMaWtlcyIsIl90b2dnbGVMaWtlQnV0dG9uIiwiX2xpa2VCdXR0b24iLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJfaGFuZGxlRGVsZXRlIiwiX2dldFRlbXBsYXRlIiwiZG9jdW1lbnQiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwicmVtb3ZlQ2FyZEVsZW1lbnQiLCJnZXRWaWV3IiwiX2NhcmRUaXRsZSIsIl9kZWxldGVCdXR0b24iLCJzcmMiLCJ0ZXh0Q29udGVudCIsImFsdCIsImNvbmZpZyIsImZvcm1FbGVtZW50IiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm1FbGVtZW50IiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbCIsImVycm9yTWVzc2FnZUVsIiwiaWQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsIl9oaWRlSW5wdXRFcnJvciIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwidG9nZ2xlQnV0dG9uU3RhdGUiLCJfaGFzSW52YWxpZElucHV0IiwiX3N1Ym1pdEJ1dHRvbiIsImRpc2FibGVkIiwiX2lucHV0RWxzIiwic29tZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaW5wdXRFbGVtZW50IiwiZW5hYmxlVmFsaWRhdGlvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsIlNlY3Rpb24iLCJfcmVmIiwiY29udGFpbmVyIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9yZW5kZXJJdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJyZW5kZXJJdGVtcyIsImNvbnNvbGUiLCJsb2ciLCJpdGVtIiwiYWRkSXRlbSIsImNhcmRFbGVtZW50IiwicHJlcGVuZCIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cEVsZW1lbnQiLCJvcGVuIiwiX2hhbmRsZUVzY0Nsb3NlIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX2Nsb3NlTW9kYWxDbGljayIsInRhcmdldCIsImNvbnRhaW5zIiwia2V5Iiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX3BvcHVwRm9ybSIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX3N1Ym1pdEJ1dHRvblRleHQiLCJzZXRMb2FkaW5nIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJ2YWx1ZXMiLCJpbnB1dCIsInZhbHVlIiwiX3N1Ym1pdEZvcm0iLCJldmVudCIsImlucHV0VmFsdWVzIiwic2V0VGltZW91dCIsInJlc2V0IiwicHJvZmlsZVRpdGxlIiwicHJvZmlsZVN1YnRpdGxlIiwicHJvZmlsZUVkaXRCdXR0b24iLCJwcm9maWxlRWRpdE1vZGFsIiwicHJvZmlsZVRpdGxlSW5wdXQiLCJwcm9maWxlU3VidGl0bGVJbnB1dCIsInByb2ZpbGVFZGl0Rm9ybSIsImF2YXRhckVkaXRGb3JtIiwiY2FyZExpc3RFbCIsInByb2ZpbGVBZGRCdXR0b24iLCJjYXJkQWRkRm9ybSIsImF2YXRhckVkaXRCdXR0b24iLCJwcm9maWxlQXZhdGFyIiwiZm9ybVNlbGVjdG9yIiwiYXBpIiwiYmFzZVVybCIsImhlYWRlcnMiLCJfYmFzZVVybCIsIl9oZWFkZXJzIiwiX2hhbmRsZVNlcnZlclJlc3BvbnNlIiwicmVzIiwianNvbiIsInRoZW4iLCJkYXRhIiwib2siLCJlcnJvciIsIkVycm9yIiwic3RhdHVzIiwibWVzc2FnZSIsIl9yZXF1ZXN0IiwidXJsIiwib3B0aW9ucyIsImZldGNoIiwiZ2V0SW5pdGlhbENhcmRzIiwiZ2V0VXNlckluZm8iLCJhZGRDYXJkIiwiX3JlZjIiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInJlbW92ZUNhcmQiLCJjYXJkSWQiLCJjaGFuZ2VMaWtlU3RhdHVzIiwidXBkYXRlVXNlckluZm8iLCJkZXNjcmlwdGlvbiIsImFib3V0Iiwic2V0VXNlckF2YXRhciIsImF2YXRhciIsImF1dGhvcml6YXRpb24iLCJhZGRGb3JtVmFsaWRhdG9yIiwiRm9ybVZhbGlkYXRvciIsImVkaXRGb3JtVmFsaWRhdG9yIiwiZWRpdEF2YXRhclZhbGlkYXRvciIsImVkaXRQb3B1cCIsIl9yZWYzIiwidXNlckluZm8iLCJzZXRVc2VySW5mbyIsImNhdGNoIiwiZmluYWxseSIsImF2YXRhckVkaXRQb3B1cCIsIl9yZWY1IiwidXNlckRhdGEiLCJkZWxldGVQb3B1cCIsIl9mb3JtIiwic2V0U3VibWl0QWN0aW9uIiwiYWN0aW9uIiwiaGFuZGxlUHJldmlld0ltYWdlIiwicG9wdXBJbWFnZSIsInJlbmRlckNhcmQiLCJjYXJkU2VjdGlvbiIsInVzZXJJZCIsIlByb21pc2UiLCJhbGwiLCJpbml0aWFsQ2FyZHMiLCJfcHJldmlld0ltYWdlRWxlbWVudCIsIl9wcmV2aWV3SW1hZ2VDYXB0aW9uIiwidXNlck5hbWVFbGVtZW50IiwidXNlckpvYkVsZW1lbnQiLCJhdmF0YXJFbGVtZW50IiwiX25hbWVFbGVtZW50IiwiX2pvYkVsZW1lbnQiLCJfYXZhdGFyRWxlbWVudCIsInByb2ZpbGVPYmplY3QiLCJ0ZXh0Y29udGVudCIsIm5ld0NhcmRQb3B1cCIsIl9yZWY0Il0sInNvdXJjZVJvb3QiOiIifQ==